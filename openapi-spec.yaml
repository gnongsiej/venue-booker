openapi: 3.0.3
info:
  title: Venue Booker
  description: |
    This is the specification for a venue booking management system.
  contact:
    email: jus4me2009@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: User
    description: User management
  - name: Session
    description: Internal Session management
  - name: Account
    description: Account management
  - name: Venue
    description: Venue Listing management
  - name: Slot
    description: Venue Slots management
  - name: Booking
    description: Venue Bookings management
  - name: Payment
    description: Payment Transactions
  - name: History
    description: Booking History management
  - name: Admin
    description: Administrative Users
paths:
  /user/signup:
    post:
      tags:
        - User
      summary: Create a new signup for a customer
      description: Create a new customer account on sign up
      operationId: signup
      requestBody:
        $ref: '#/components/requestBodies/SignupForm'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulSignup'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/PasswordHash'
      responses:
        '200':
          $ref: '#/components/responses/SessionToken'
        '400':
          description: Wrong Username/Password combination
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters:
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          description: Successfully logged out
        '400':
          description: Data missing or incorrect
  /session/token:
    post:
      tags:
        - Session
      summary: Create a new session token
      description: ''
      operationId: createToken
      requestBody:
        $ref: '#/components/requestBodies/TokenRegistration'
      responses:
        '200':
          $ref: '#/components/responses/SessionToken'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
  /session/token/validate:
    get:
      tags:
        - Session
      summary: Validate session token
      description: ''
      operationId: validateSession
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          $ref: '#/components/responses/SessionToken'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
  /session/token/revoke:
    delete:
      tags:
        - Session
      summary: Revoke session token
      description: ''
      operationId: revokeSession
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '204':
          description: Session Ended
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
  /session/token/authorizeRole:
    get:
      tags:
        - Session
      summary: Authorize role and permissions
      description: ''
      operationId: authorizeRole
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          $ref: '#/components/responses/SessionToken'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
  /account/view/{accountId}:
    get:
      tags:
        - Account
      summary: View account details
      description: ''
      operationId: viewAccount
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/AccountId'
      responses:
        '200':
          $ref: '#/components/responses/AccountDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
    put:
      tags:
        - Account
      summary: Update account details
      description: ''
      operationId: updateAccount
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        $ref: '#/components/requestBodies/AccountDetails'
      responses:
        '200':
          $ref: '#/components/responses/AccountDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Account not found
        '422':
          description: Validation exception
  /venues:
    post:
      tags:
        - Admin
      summary: Create new venue
      description: ''
      operationId: createVenue
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        $ref: '#/components/requestBodies/VenueDetails'
      responses:
        '200':
          $ref: '#/components/responses/VenueDetails'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
    get:
      tags:
        - Venue
      summary: Fetch all venues
      description: ''
      operationId: getVenues
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          $ref: '#/components/responses/VenueList'
        '400':
          description: Invalid data supplied
        '404':
          description: Venues not found
        '422':
          description: Validation exception
  /venues/{venueId}:
    get:
      tags:
        - Venue
      summary: Get venue details
      description: ''
      operationId: getVenueDetails
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/VenueIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/VenueDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Venue not found
        '422':
          description: Validation exception
    put:
      tags:
        - Admin
      summary: Update venue details
      description: ''
      operationId: updateVenueDetails
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/VenueIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/VenueDetails'
      responses:
        '200':
          $ref: '#/components/responses/VenueDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Venue not found
        '422':
          description: Validation exception
    delete:
      tags:
        - Admin
      summary: Delete venue
      description: ''
      operationId: deleteVenue
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/VenueIdPathParam'
      responses:
        '204':
          description: Venue deleted successfully
        '400':
          description: Invalid data supplied
        '404':
          description: Venue not found
        '422':
          description: Validation exception
  /venues/{venueId}/bookings:
    get:
      tags:
        - Admin
      summary: Get all bookings for venue
      description: ''
      operationId: getVenueBookings
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/VenueIdPathParam'
        - $ref: '#/components/parameters/RequestedDate'
      responses:
        '200':
          $ref: '#/components/responses/BookingList'
        '400':
          description: Invalid data supplied
        '404':
          description: Venue not found
        '422':
          description: Validation exception
  /slots:
    post:
      tags:
        - Admin
      summary: Add new slot
      description: ''
      operationId: addSlot
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        $ref: '#/components/requestBodies/SlotDetails'
      responses:
        '200':
          $ref: '#/components/responses/SlotDetails'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
    get:
      tags:
        - Slot
      summary: Get slots by venue and date
      description: ''
      operationId: fetchSlots
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/VenueIdQueryParam'
        - $ref: '#/components/parameters/RequestedDate'
      responses:
        '200':
          $ref: '#/components/responses/SlotList'
        '400':
          description: Invalid data supplied
        '404':
          description: Slots not found
        '422':
          description: Validation exception
  /slots/{slotId}:
    get:
      tags:
        - Slot
      summary: Get details of slot by ID
      description: ''
      operationId: getSlotDetails
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/SlotIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/SlotDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Slot not found
        '422':
          description: Validation exception
    put:
      tags:
        - Admin
      summary: Update details of slot by ID
      description: ''
      operationId: updateSlotDetails
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/SlotIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/SlotDetails'
      responses:
        '200':
          $ref: '#/components/responses/SlotDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Slot not found
        '422':
          description: Validation exception
    delete:
      tags:
        - Admin
      summary: Delete slot by ID
      description: ''
      operationId: deleteSlot
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/SlotIdPathParam'
      responses:
        '204':
          description: Slot deleted successfully
        '400':
          description: Invalid data supplied
        '404':
          description: Slot not found
        '422':
          description: Validation exception
  /bookings:
    post:
      tags:
        - Booking
      summary: Create a new booking
      description: ''
      operationId: createBooking
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        $ref: '#/components/requestBodies/BookingDetails'
      responses:
        '200':
          $ref: '#/components/responses/BookingDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Slot not found
        '422':
          description: Validation exception
    get:
      tags:
        - Booking
      summary: Get bookings made with account
      description: ''
      operationId: fetchBookings
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          $ref: '#/components/responses/BookingList'
        '400':
          description: Invalid data supplied
        '404':
          description: Slots not found
        '422':
          description: Validation exception
  /bookings/{bookingId}:
    get:
      tags:
        - Booking
      summary: Get details of booking by ID
      description: ''
      operationId: getBookingDetails
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/BookingIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/BookingDetails'
        '400':
          description: Invalid data supplied
        '404':
          description: Slot not found
        '422':
          description: Validation exception
    delete:
      tags:
        - Booking
      summary: Cancel a booking by ID
      description: ''
      operationId: cancelBooking
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/BookingIdPathParam'
      responses:
        '204':
          description: Booking canceled successfully
        '400':
          description: Invalid data supplied
        '404':
          description: Booking not found
        '422':
          description: Validation exception
  /bookings/date:
    get:
      tags:
        - Admin
      summary: Get confirmed bookings for date
      description: ''
      operationId: fetchBookingsByDate
      parameters:
        - $ref: '#/components/parameters/SessionToken'
        - $ref: '#/components/parameters/RequestedDate'
      responses:
        '200':
          $ref: '#/components/responses/BookingList'
        '400':
          description: Invalid data supplied
        '404':
          description: Venue not found
        '422':
          description: Validation exception
  /payments:
    post:
      tags:
        - Payment
      summary: Record Transaction
      description: ''
      operationId: recordTransaction
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      requestBody:
        $ref: '#/components/requestBodies/TransactionRecord'
      responses:
        '200':
          $ref: '#/components/responses/TransactionRecord'
        '400':
          description: Invalid data supplied
        '422':
          description: Validation exception
  /history:
    get:
      tags:
        - History
      summary: Fetch bookings for past 6 months for account
      description: ''
      operationId: fetchHistory
      parameters:
        - $ref: '#/components/parameters/SessionToken'
      responses:
        '200':
          $ref: '#/components/responses/BookingList'
        '400':
          description: Invalid data supplied
        '404':
          description: Slots not found
        '422':
          description: Validation exception
components:
  parameters:
    Username:
      name: username
      in: query
      description: The user name for login
      required: true
      schema:
        type: string
      example: theUser
    PasswordHash:
      name: password
      in: query
      description: The password hash for login
      required: true
      schema:
        type: string
      example: '42dce01e866bd024be481aa11dcbcea8d84cd2856950431f02544bc6957fb3a2'
    SessionToken:
      name: sessionToken
      in: query
      description: Currently active Session Token ID
      required: true
      schema:
        type: string
        example: 2789d238-4fcd-4e8a-ad0e-760ab3414d63
    AccountId:
      name: accountId
      in: path
      description: The account ID currently active
      required: true
      schema:
        $ref: '#/components/schemas/AccountId'
    VenueIdPathParam:
      name: venueId
      in: path
      description: The ID for the venue
      required: true
      schema:
        $ref: '#/components/schemas/VenueId'
    VenueIdQueryParam:
      name: venueId
      in: query
      description: The ID for the venue
      required: true
      schema:
        $ref: '#/components/schemas/VenueId'
    RequestedDate:
      name: requestedDate
      in: query
      description: |
        The date for which the request is to be made.

        If no date is provided, the current date will be used.
      required: true
      schema:
        type: string
        format: date
        example: '2025-02-02'
    SlotIdPathParam:
      name: slotId
      in: path
      description: The ID for the slot
      required: true
      schema:
        $ref: '#/components/schemas/SlotId'
    BookingIdPathParam:
      name: bookingId
      in: path
      description: The ID for the booking
      required: true
      schema:
        $ref: '#/components/schemas/BookingId'
  schemas:
    # PRIMITIVES

    Username:
      type: string
      description: Username of the account
      example: theUser
    FirstName:
      type: string
      description: First name of the account holder
      example: John
    LastName:
      type: string
      description: Last name of the account holder
      example: James
    Email:
      type: string
      description: Email address of the account holder
      example: john@email.com
    Phone:
      type: string
      minLength: 10
      maxLength: 10
      example: '7894561230'
    Password:
      type: string
      description: |
        Contains a password hash instead of actual password.
      example: '42dce01e866bd024be481aa11dcbcea8d84cd2856950431f02544bc6957fb3a2'
    AccountId:
      type: string
      description: ID of the account
      example: '321654987'
    AccountRole:
      type: string
      description: Role for which the account has permissions
      enum:
        - CUSTOMER
        - ADMIN
        - DEVELOPER
      example: CUSTOMER
    SessionId:
      type: string
      description: Server-generated GUID denoting session
      example: '2789d238-4fcd-4e8a-ad0e-760ab3414d63'
    VenueId:
      type: string
      description: Server-generated GUID for venue
      example: 'c124030d-85f6-473f-9670-af3a101d6203'
    VenueName:
      type: string
      description: Name of the venue
      example: 'Amazing Venue Club'
    AddressLine1:
      type: string
      description: First line of address
      example: '3608, 414 Reilly Point Apt. 188'
    AddressLine2:
      type: string
      description: Second (optional) line of address
      example: 'Zoie Oval'
    City:
      type: string
      description: City of address
      example: 'Shillong'
    State:
      type: string
      description: State of address
      example: 'Meghalaya'
    PostCode:
      type: string
      minLength: 6
      maxLength: 6
      description: Post Code of address
      example: '793001'
    SlotId:
      type: string
      description: Server-generated GUID for slot
      example: '455e9f09-cf30-4c49-bb80-8bf09ec90212'
    TransactionId:
      type: string
      description: Unique identification number generated by payment gateway to identify a successful transaction
      example: '753498729423947'
    BookingId:
      type: string
      description: Server-generated GUID for booking
      example: '70a78dcb-77b3-4c84-9ca5-acdae74c0988'

    # END PRIMITIVES

    SlotDetails:
      type: object
      properties:
        slotId:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/SlotId'
        slotStartTime:
          type: string
          format: date-time
          description: Date and time when slot starts
          example: '2025-02-02T09:00:00Z'
        slotEndTime:
          type: string
          format: date-time
          description: Date and time when slot ends
          example: '2025-02-02T12:00:00Z'
        bookingCost:
          type: string
          description: Cost (in Rs.) for booking this slot
          example: '2000.00'
        availability:
          type: boolean
          description: Returns true if slot is still available
          example: true
      xml:
        name: slot
    VenueAddress:
      type: object
      required:
        - address1
        - city
        - state
        - postalCode
      properties:
        address1:
          $ref: '#/components/schemas/AddressLine1'
        address2:
          $ref: '#/components/schemas/AddressLine2'
        city:
          $ref: '#/components/schemas/City'
        state:
          $ref: '#/components/schemas/State'
        postalCode:
          $ref: '#/components/schemas/PostCode'
    VenueDetails:
      type: object
      properties:
        venueId:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/VenueId'
        venueName:
          $ref: '#/components/schemas/VenueName'
        venueAddress:
          $ref: '#/components/schemas/VenueAddress'
      xml:
        name: venue
    AccountDetails:
      type: object
      properties:
        username:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Username'
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/Phone'
      xml:
        name: accountDetails
    TokenRegistration:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountRole:
          $ref: '#/components/schemas/AccountRole'
      xml:
        name: registerToken
    SessionToken:
      type: object
      properties:
        sessionId:
          $ref: '#/components/schemas/SessionId'
        sessionCreatedAt:
          type: string
          format: date-time
          description: Date time when session token created
          example: '2024-12-21T17:32:28Z'
        sessionLastModifiedOn:
          type: string
          format: date-time
          description: Date time when session token created
          example: '2024-12-23T17:32:28Z'
        sessionExpiresAfter:
          type: string
          description: Ticks after `sessionCreatedAt` after which session token expires
          example: '360000'
        accountRole:
          $ref: '#/components/schemas/AccountRole'
        accountId:
          $ref: '#/components/schemas/AccountId'
      xml:
        name: sessionToken
    SuccessfulSignup:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountRole:
          $ref: '#/components/schemas/AccountRole'
        message:
          type: string
          example: Account Created Successfully
      xml:
        name: signupResponse
    SignupForm:
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/FirstName'
        lastName:
          $ref: '#/components/schemas/LastName'
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        email:
          $ref: '#/components/schemas/Email'
        phone:
          $ref: '#/components/schemas/Phone'
      xml:
        name: user
    BookingDetails:
      type: object
      properties:
        bookingId:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BookingId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        slotId:
          $ref: '#/components/schemas/SlotId'
        venueId:
          $ref: '#/components/schemas/VenueId'
        transactionId:
          $ref: '#/components/schemas/TransactionId'
      xml:
        name: booking
    TransactionRecord:
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        bookingId:
          $ref: '#/components/schemas/BookingId'
        transactionDate:
          type: string
          format: date-time
          description: Date and time when transaction was successfully completed
          example: '2025-02-02T09:00:00Z'
        previousTransactionId:
          $ref: '#/components/schemas/TransactionId'
      xml:
        name: transactionRecord
  requestBodies:
    TokenRegistration:
      description: New token registration form
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenRegistration'
        application/xml:
          schema:
            $ref: '#/components/schemas/TokenRegistration'
    SignupForm:
      description: New customer sign up form
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupForm'
        application/xml:
          schema:
            $ref: '#/components/schemas/SignupForm'
    AccountDetails:
      description: Updated details of user account
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/AccountDetails'
    VenueDetails:
      description: Details of venue
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VenueDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/VenueDetails'
    SlotDetails:
      description: Details of slot
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SlotDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/SlotDetails'
    BookingDetails:
      description: Details of booking
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookingDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/BookingDetails'
    TransactionRecord:
      description: Details of transaction
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRecord'
        application/xml:
          schema:
            $ref: '#/components/schemas/TransactionRecord'
  responses:
    SuccessfulSignup:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessfulSignup'
        application/xml:
          schema:
            $ref: '#/components/schemas/SuccessfulSignup'
    SessionToken:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionToken'
        application/xml:
          schema:
            $ref: '#/components/schemas/SessionToken'
    AccountDetails:
      description: Details of user account
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/AccountDetails'
    VenueDetails:
      description: Details of venue
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VenueDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/VenueDetails'
    VenueList:
      description: List of venues
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VenueDetails'
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/VenueDetails'
            xml:
              wrapped: true
              name: venues
    SlotDetails:
      description: Details of slot
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SlotDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/SlotDetails'
    SlotList:
      description: List of slots on requested date
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SlotDetails'
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SlotDetails'
            xml:
              wrapped: true
              name: slots
    BookingDetails:
      description: Details of booking
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookingDetails'
        application/xml:
          schema:
            $ref: '#/components/schemas/BookingDetails'
    BookingList:
      description: List of bookings made with account
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BookingDetails'
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BookingDetails'
            xml:
              wrapped: true
              name: bookings
    TransactionRecord:
      description: Details of transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRecord'
        application/xml:
          schema:
            $ref: '#/components/schemas/TransactionRecord'
